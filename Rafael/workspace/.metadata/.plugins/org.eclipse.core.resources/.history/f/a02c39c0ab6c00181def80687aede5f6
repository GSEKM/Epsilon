	/*
 * 
 */
package myModel.diagram.part;

	/**
 * @generated
 */
public class MyModelDiagramUpdater {
		
	/**
 * @generated
 */
public static boolean isShortcutOrphaned(org.eclipse.gmf.runtime.notation.View view) {
	return !view.isSetElement() || view.getElement() == null || view.getElement().eIsProxy();
}
	
		/**
 * @generated
 */
public static java.util.List<myModel.diagram.part.MyModelNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (myModel.diagram.part.MyModelVisualIDRegistry.getVisualID(view)) {
		case myModel.diagram.edit.parts.ArduinoEditPart.VISUAL_ID:
	return getArduino_1000SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<myModel.diagram.part.MyModelNodeDescriptor> getArduino_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
myModel.Arduino modelElement = (myModel.Arduino) view.getElement();
	java.util.LinkedList<myModel.diagram.part.MyModelNodeDescriptor> result = new java.util.LinkedList<myModel.diagram.part.MyModelNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getModules().iterator(); it.hasNext();) {
		myModel.Module childElement = (myModel.Module) it.next();
					int visualID = myModel.diagram.part.MyModelVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == myModel.diagram.edit.parts.ModuleEditPart.VISUAL_ID) {
	result.add(new myModel.diagram.part.MyModelNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<myModel.diagram.part.MyModelLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (myModel.diagram.part.MyModelVisualIDRegistry.getVisualID(view)) {
		case myModel.diagram.edit.parts.ArduinoEditPart.VISUAL_ID:
	return getArduino_1000ContainedLinks(view);
case myModel.diagram.edit.parts.ModuleEditPart.VISUAL_ID:
	return getModule_2001ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<myModel.diagram.part.MyModelLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (myModel.diagram.part.MyModelVisualIDRegistry.getVisualID(view)) {
		case myModel.diagram.edit.parts.ModuleEditPart.VISUAL_ID:
	return getModule_2001IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<myModel.diagram.part.MyModelLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (myModel.diagram.part.MyModelVisualIDRegistry.getVisualID(view)) {
		case myModel.diagram.edit.parts.ModuleEditPart.VISUAL_ID:
	return getModule_2001OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<myModel.diagram.part.MyModelLinkDescriptor> getArduino_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<myModel.diagram.part.MyModelLinkDescriptor> getModule_2001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<myModel.diagram.part.MyModelLinkDescriptor> getModule_2001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<myModel.diagram.part.MyModelLinkDescriptor> getModule_2001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
				
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<myModel.diagram.part.MyModelNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return MyModelDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<myModel.diagram.part.MyModelLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return MyModelDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<myModel.diagram.part.MyModelLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return MyModelDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<myModel.diagram.part.MyModelLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return MyModelDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
