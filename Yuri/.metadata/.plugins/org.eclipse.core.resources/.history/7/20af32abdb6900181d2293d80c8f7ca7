	/*
 * 
 */
package friends.diagram.part;

	/**
 * @generated
 */
public class FriendsDiagramUpdater {
		
	/**
 * @generated
 */
public static boolean isShortcutOrphaned(org.eclipse.gmf.runtime.notation.View view) {
	return !view.isSetElement() || view.getElement() == null || view.getElement().eIsProxy();
}
	
		/**
 * @generated
 */
public static java.util.List<friends.diagram.part.FriendsNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (friends.diagram.part.FriendsVisualIDRegistry.getVisualID(view)) {
		case friends.diagram.edit.parts.WorldEditPart.VISUAL_ID:
	return getWorld_1000SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<friends.diagram.part.FriendsNodeDescriptor> getWorld_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
friends.World modelElement = (friends.World) view.getElement();
	java.util.LinkedList<friends.diagram.part.FriendsNodeDescriptor> result = new java.util.LinkedList<friends.diagram.part.FriendsNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getPeople().iterator(); it.hasNext();) {
		friends.Person childElement = (friends.Person) it.next();
					int visualID = friends.diagram.part.FriendsVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == friends.diagram.edit.parts.PersonEditPart.VISUAL_ID) {
	result.add(new friends.diagram.part.FriendsNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<friends.diagram.part.FriendsLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (friends.diagram.part.FriendsVisualIDRegistry.getVisualID(view)) {
		case friends.diagram.edit.parts.WorldEditPart.VISUAL_ID:
	return getWorld_1000ContainedLinks(view);
case friends.diagram.edit.parts.PersonEditPart.VISUAL_ID:
	return getPerson_2001ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<friends.diagram.part.FriendsLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (friends.diagram.part.FriendsVisualIDRegistry.getVisualID(view)) {
		case friends.diagram.edit.parts.PersonEditPart.VISUAL_ID:
	return getPerson_2001IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<friends.diagram.part.FriendsLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (friends.diagram.part.FriendsVisualIDRegistry.getVisualID(view)) {
		case friends.diagram.edit.parts.PersonEditPart.VISUAL_ID:
	return getPerson_2001OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<friends.diagram.part.FriendsLinkDescriptor> getWorld_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<friends.diagram.part.FriendsLinkDescriptor> getPerson_2001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	friends.Person modelElement = (friends.Person) view.getElement();
		java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor> result = new java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Person_FriendOf_4001(modelElement));	
	result.addAll(getOutgoingFeatureModelFacetLinks_Person_EnemyOf_4002(modelElement));	
	return result;
}
		
/**
 * @generated
 */
public static java.util.List<friends.diagram.part.FriendsLinkDescriptor> getPerson_2001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	friends.Person modelElement = (friends.Person) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor> result = new java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor>();
		result.addAll(getIncomingFeatureModelFacetLinks_Person_FriendOf_4001(modelElement, crossReferences));	
	result.addAll(getIncomingFeatureModelFacetLinks_Person_EnemyOf_4002(modelElement, crossReferences));	
	return result;
}
		
/**
 * @generated
 */
public static java.util.List<friends.diagram.part.FriendsLinkDescriptor> getPerson_2001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	friends.Person modelElement = (friends.Person) view.getElement();
		java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor> result = new java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Person_FriendOf_4001(modelElement));	
	result.addAll(getOutgoingFeatureModelFacetLinks_Person_EnemyOf_4002(modelElement));	
	return result;
}
		
/**
 * @generated
 */
private static java.util.Collection<friends.diagram.part.FriendsLinkDescriptor> getIncomingFeatureModelFacetLinks_Person_FriendOf_4001(friends.Person target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor> result = new java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() == friends.FriendsPackage.eINSTANCE.getPerson_FriendOf()) {
	result.add(new friends.diagram.part.FriendsLinkDescriptor(setting.getEObject(), target, friends.diagram.providers.FriendsElementTypes.PersonFriendOf_4001, friends.diagram.edit.parts.PersonFriendOfEditPart.VISUAL_ID));
}
	}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<friends.diagram.part.FriendsLinkDescriptor> getIncomingFeatureModelFacetLinks_Person_EnemyOf_4002(friends.Person target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor> result = new java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() == friends.FriendsPackage.eINSTANCE.getPerson_EnemyOf()) {
	result.add(new friends.diagram.part.FriendsLinkDescriptor(setting.getEObject(), target, friends.diagram.providers.FriendsElementTypes.PersonEnemyOf_4002, friends.diagram.edit.parts.PersonEnemyOfEditPart.VISUAL_ID));
}
	}
	return result;	
}
		
	/**
 * @generated
 */
private static java.util.Collection<friends.diagram.part.FriendsLinkDescriptor> getOutgoingFeatureModelFacetLinks_Person_FriendOf_4001(friends.Person source) {
	java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor> result = new java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor>();
		for (java.util.Iterator<?> destinations = source.getFriendOf().iterator(); destinations.hasNext();) {
		friends.Person destination = (friends.Person) destinations.next();
		result.add(new friends.diagram.part.FriendsLinkDescriptor(source, destination, friends.diagram.providers.FriendsElementTypes.PersonFriendOf_4001, friends.diagram.edit.parts.PersonFriendOfEditPart.VISUAL_ID));
		}
		return result;
}
	
	/**
 * @generated
 */
private static java.util.Collection<friends.diagram.part.FriendsLinkDescriptor> getOutgoingFeatureModelFacetLinks_Person_EnemyOf_4002(friends.Person source) {
	java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor> result = new java.util.LinkedList<friends.diagram.part.FriendsLinkDescriptor>();
		for (java.util.Iterator<?> destinations = source.getEnemyOf().iterator(); destinations.hasNext();) {
		friends.Person destination = (friends.Person) destinations.next();
		result.add(new friends.diagram.part.FriendsLinkDescriptor(source, destination, friends.diagram.providers.FriendsElementTypes.PersonEnemyOf_4002, friends.diagram.edit.parts.PersonEnemyOfEditPart.VISUAL_ID));
		}
		return result;
}
	
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<friends.diagram.part.FriendsNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return FriendsDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<friends.diagram.part.FriendsLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return FriendsDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<friends.diagram.part.FriendsLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return FriendsDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<friends.diagram.part.FriendsLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return FriendsDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
