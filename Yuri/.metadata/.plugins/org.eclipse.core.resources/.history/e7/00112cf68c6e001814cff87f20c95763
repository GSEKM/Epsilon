/*
 * 
 */
package iot.diagram.part;

import iot.Arduino;
import iot.Board;
import iot.Motor;
import iot.diagram.edit.parts.ArduinoConectorEditPart;
import iot.diagram.edit.parts.ArduinoEditPart;
import iot.diagram.edit.parts.BoardEditPart;
import iot.diagram.providers.IotElementTypes;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.tooling.runtime.update.DiagramUpdater;

/**
 * @generated
 */
public class IotDiagramUpdater {

	/**
	 * @generated
	 */
	public static boolean isShortcutOrphaned(View view) {
		return !view.isSetElement() || view.getElement() == null
				|| view.getElement().eIsProxy();
	}

	/**
	 * @generated
	 */
	public static List<IotNodeDescriptor> getSemanticChildren(View view) {
		switch (IotVisualIDRegistry.getVisualID(view)) {
		case BoardEditPart.VISUAL_ID:
			return getBoard_1000SemanticChildren(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotNodeDescriptor> getBoard_1000SemanticChildren(
			View view) {
		if (!view.isSetElement()) {
			return Collections.emptyList();
		}
		Board modelElement = (Board) view.getElement();
		LinkedList<IotNodeDescriptor> result = new LinkedList<IotNodeDescriptor>();
		for (Iterator<?> it = modelElement.getModelo().iterator(); it.hasNext();) {
			Arduino childElement = (Arduino) it.next();
			int visualID = IotVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ArduinoEditPart.VISUAL_ID) {
				result.add(new IotNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<IotLinkDescriptor> getContainedLinks(View view) {
		switch (IotVisualIDRegistry.getVisualID(view)) {
		case BoardEditPart.VISUAL_ID:
			return getBoard_1000ContainedLinks(view);
		case ArduinoEditPart.VISUAL_ID:
			return getArduino_2002ContainedLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotLinkDescriptor> getIncomingLinks(View view) {
		switch (IotVisualIDRegistry.getVisualID(view)) {
		case ArduinoEditPart.VISUAL_ID:
			return getArduino_2002IncomingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotLinkDescriptor> getOutgoingLinks(View view) {
		switch (IotVisualIDRegistry.getVisualID(view)) {
		case ArduinoEditPart.VISUAL_ID:
			return getArduino_2002OutgoingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotLinkDescriptor> getBoard_1000ContainedLinks(View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotLinkDescriptor> getArduino_2002ContainedLinks(
			View view) {
		Arduino modelElement = (Arduino) view.getElement();
		LinkedList<IotLinkDescriptor> result = new LinkedList<IotLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Arduino_Conector_4004(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<IotLinkDescriptor> getArduino_2002IncomingLinks(View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotLinkDescriptor> getArduino_2002OutgoingLinks(View view) {
		Arduino modelElement = (Arduino) view.getElement();
		LinkedList<IotLinkDescriptor> result = new LinkedList<IotLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Arduino_Conector_4004(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	private static Collection<IotLinkDescriptor> getOutgoingFeatureModelFacetLinks_Arduino_Conector_4004(
			Arduino source) {
		LinkedList<IotLinkDescriptor> result = new LinkedList<IotLinkDescriptor>();
		for (Iterator<?> destinations = source.getConector().iterator(); destinations
				.hasNext();) {
			Motor destination = (Motor) destinations.next();
			result.add(new IotLinkDescriptor(source, destination,
					IotElementTypes.ArduinoConector_4004,
					ArduinoConectorEditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static final DiagramUpdater TYPED_INSTANCE = new DiagramUpdater() {
		/**
		 * @generated
		 */
		public List<IotNodeDescriptor> getSemanticChildren(View view) {
			return IotDiagramUpdater.getSemanticChildren(view);
		}

		/**
		 * @generated
		 */
		public List<IotLinkDescriptor> getContainedLinks(View view) {
			return IotDiagramUpdater.getContainedLinks(view);
		}

		/**
		 * @generated
		 */
		public List<IotLinkDescriptor> getIncomingLinks(View view) {
			return IotDiagramUpdater.getIncomingLinks(view);
		}

		/**
		 * @generated
		 */
		public List<IotLinkDescriptor> getOutgoingLinks(View view) {
			return IotDiagramUpdater.getOutgoingLinks(view);
		}
	};

}
