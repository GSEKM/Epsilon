	package iotgmf.diagram.part;

	/**
 * @generated
 */
public class IotGmfDiagramUpdater {
		
		/**
 * @generated
 */
public static java.util.List<iotgmf.diagram.part.IotGmfNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (iotgmf.diagram.part.IotGmfVisualIDRegistry.getVisualID(view)) {
		case iotgmf.diagram.edit.parts.BoardEditPart.VISUAL_ID:
	return getBoard_1000SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<iotgmf.diagram.part.IotGmfNodeDescriptor> getBoard_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
iotgmf.Board modelElement = (iotgmf.Board) view.getElement();
	java.util.LinkedList<iotgmf.diagram.part.IotGmfNodeDescriptor> result = new java.util.LinkedList<iotgmf.diagram.part.IotGmfNodeDescriptor>();
						{ iotgmf.Arduino childElement = modelElement.getBoard();
					int visualID = iotgmf.diagram.part.IotGmfVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == iotgmf.diagram.edit.parts.ArduinoEditPart.VISUAL_ID) {
	result.add(new iotgmf.diagram.part.IotGmfNodeDescriptor(childElement, visualID));
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<iotgmf.diagram.part.IotGmfLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (iotgmf.diagram.part.IotGmfVisualIDRegistry.getVisualID(view)) {
		case iotgmf.diagram.edit.parts.BoardEditPart.VISUAL_ID:
	return getBoard_1000ContainedLinks(view);
case iotgmf.diagram.edit.parts.ArduinoEditPart.VISUAL_ID:
	return getArduino_2001ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<iotgmf.diagram.part.IotGmfLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (iotgmf.diagram.part.IotGmfVisualIDRegistry.getVisualID(view)) {
		case iotgmf.diagram.edit.parts.ArduinoEditPart.VISUAL_ID:
	return getArduino_2001IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<iotgmf.diagram.part.IotGmfLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (iotgmf.diagram.part.IotGmfVisualIDRegistry.getVisualID(view)) {
		case iotgmf.diagram.edit.parts.ArduinoEditPart.VISUAL_ID:
	return getArduino_2001OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<iotgmf.diagram.part.IotGmfLinkDescriptor> getBoard_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<iotgmf.diagram.part.IotGmfLinkDescriptor> getArduino_2001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<iotgmf.diagram.part.IotGmfLinkDescriptor> getArduino_2001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<iotgmf.diagram.part.IotGmfLinkDescriptor> getArduino_2001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
				
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<iotgmf.diagram.part.IotGmfNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return IotGmfDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<iotgmf.diagram.part.IotGmfLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return IotGmfDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<iotgmf.diagram.part.IotGmfLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return IotGmfDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<iotgmf.diagram.part.IotGmfLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return IotGmfDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
