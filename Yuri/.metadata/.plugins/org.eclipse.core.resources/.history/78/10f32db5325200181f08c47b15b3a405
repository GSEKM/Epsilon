package iotgmf.diagram.part;

import iotgmf.Init;
import iotgmf.IotgmfPackage;
import iotgmf.Sensor;
import iotgmf.diagram.edit.parts.InitEditPart;
import iotgmf.diagram.edit.parts.Sensor2EditPart;
import iotgmf.diagram.edit.parts.SensorEditPart;
import iotgmf.diagram.providers.IotGmfElementTypes;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.tooling.runtime.update.DiagramUpdater;

/**
 * @generated
 */
public class IotGmfDiagramUpdater {

	/**
	 * @generated
	 */
	public static List<IotGmfNodeDescriptor> getSemanticChildren(View view) {
		switch (IotGmfVisualIDRegistry.getVisualID(view)) {
		case InitEditPart.VISUAL_ID:
			return getInit_1000SemanticChildren(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfNodeDescriptor> getInit_1000SemanticChildren(
			View view) {
		if (!view.isSetElement()) {
			return Collections.emptyList();
		}
		Init modelElement = (Init) view.getElement();
		LinkedList<IotGmfNodeDescriptor> result = new LinkedList<IotGmfNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSensor().iterator(); it.hasNext();) {
			Sensor childElement = (Sensor) it.next();
			int visualID = IotGmfVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == SensorEditPart.VISUAL_ID) {
				result.add(new IotGmfNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getContainedLinks(View view) {
		switch (IotGmfVisualIDRegistry.getVisualID(view)) {
		case InitEditPart.VISUAL_ID:
			return getInit_1000ContainedLinks(view);
		case SensorEditPart.VISUAL_ID:
			return getSensor_2001ContainedLinks(view);
		case Sensor2EditPart.VISUAL_ID:
			return getSensor_4001ContainedLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getIncomingLinks(View view) {
		switch (IotGmfVisualIDRegistry.getVisualID(view)) {
		case SensorEditPart.VISUAL_ID:
			return getSensor_2001IncomingLinks(view);
		case Sensor2EditPart.VISUAL_ID:
			return getSensor_4001IncomingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getOutgoingLinks(View view) {
		switch (IotGmfVisualIDRegistry.getVisualID(view)) {
		case SensorEditPart.VISUAL_ID:
			return getSensor_2001OutgoingLinks(view);
		case Sensor2EditPart.VISUAL_ID:
			return getSensor_4001OutgoingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getInit_1000ContainedLinks(
			View view) {
		Init modelElement = (Init) view.getElement();
		LinkedList<IotGmfLinkDescriptor> result = new LinkedList<IotGmfLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Sensor_4001(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getSensor_2001ContainedLinks(
			View view) {
		Sensor modelElement = (Sensor) view.getElement();
		LinkedList<IotGmfLinkDescriptor> result = new LinkedList<IotGmfLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Sensor_4001(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getSensor_4001ContainedLinks(
			View view) {
		Sensor modelElement = (Sensor) view.getElement();
		LinkedList<IotGmfLinkDescriptor> result = new LinkedList<IotGmfLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Sensor_4001(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getSensor_2001IncomingLinks(
			View view) {
		Sensor modelElement = (Sensor) view.getElement();
		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
				.find(view.eResource().getResourceSet().getResources());
		LinkedList<IotGmfLinkDescriptor> result = new LinkedList<IotGmfLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Sensor_4001(modelElement,
				crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getSensor_4001IncomingLinks(
			View view) {
		Sensor modelElement = (Sensor) view.getElement();
		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
				.find(view.eResource().getResourceSet().getResources());
		LinkedList<IotGmfLinkDescriptor> result = new LinkedList<IotGmfLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Sensor_4001(modelElement,
				crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getSensor_2001OutgoingLinks(
			View view) {
		Sensor modelElement = (Sensor) view.getElement();
		LinkedList<IotGmfLinkDescriptor> result = new LinkedList<IotGmfLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Sensor_4001(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getSensor_4001OutgoingLinks(
			View view) {
		Sensor modelElement = (Sensor) view.getElement();
		LinkedList<IotGmfLinkDescriptor> result = new LinkedList<IotGmfLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Sensor_4001(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	private static Collection<IotGmfLinkDescriptor> getContainedTypeModelFacetLinks_Sensor_4001(
			Init container) {
		LinkedList<IotGmfLinkDescriptor> result = new LinkedList<IotGmfLinkDescriptor>();
		for (Iterator<?> links = container.getSensor().iterator(); links
				.hasNext();) {
			EObject linkObject = (EObject) links.next();
			if (false == linkObject instanceof Sensor) {
				continue;
			}
			Sensor link = (Sensor) linkObject;
			if (Sensor2EditPart.VISUAL_ID != IotGmfVisualIDRegistry
					.getLinkWithClassVisualID(link)) {
				continue;
			}
			List targets = link.getSensor();
			Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			if (false == theTarget instanceof Sensor) {
				continue;
			}
			Sensor dst = (Sensor) theTarget;
			List sources = link.getSensor();
			Object theSource = sources.size() == 1 ? sources.get(0) : null;
			if (false == theSource instanceof Sensor) {
				continue;
			}
			Sensor src = (Sensor) theSource;
			result.add(new IotGmfLinkDescriptor(src, dst, link,
					IotGmfElementTypes.Sensor_4001, Sensor2EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated
	 */
	private static Collection<IotGmfLinkDescriptor> getIncomingTypeModelFacetLinks_Sensor_4001(
			Sensor target,
			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
		LinkedList<IotGmfLinkDescriptor> result = new LinkedList<IotGmfLinkDescriptor>();
		Collection<EStructuralFeature.Setting> settings = crossReferences
				.get(target);
		for (EStructuralFeature.Setting setting : settings) {
			if (setting.getEStructuralFeature() != IotgmfPackage.eINSTANCE
					.getInit_Sensor()
					|| false == setting.getEObject() instanceof Sensor) {
				continue;
			}
			Sensor link = (Sensor) setting.getEObject();
			if (Sensor2EditPart.VISUAL_ID != IotGmfVisualIDRegistry
					.getLinkWithClassVisualID(link)) {
				continue;
			}
			List sources = link.getSensor();
			Object theSource = sources.size() == 1 ? sources.get(0) : null;
			if (false == theSource instanceof Sensor) {
				continue;
			}
			Sensor src = (Sensor) theSource;
			result.add(new IotGmfLinkDescriptor(src, target, link,
					IotGmfElementTypes.Sensor_4001, Sensor2EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated
	 */
	private static Collection<IotGmfLinkDescriptor> getOutgoingTypeModelFacetLinks_Sensor_4001(
			Sensor source) {
		Init container = null;
		// Find container element for the link.
		// Climb up by containment hierarchy starting from the source
		// and return the first element that is instance of the container class.
		for (EObject element = source; element != null && container == null; element = element
				.eContainer()) {
			if (element instanceof Init) {
				container = (Init) element;
			}
		}
		if (container == null) {
			return Collections.emptyList();
		}
		LinkedList<IotGmfLinkDescriptor> result = new LinkedList<IotGmfLinkDescriptor>();
		for (Iterator<?> links = container.getSensor().iterator(); links
				.hasNext();) {
			EObject linkObject = (EObject) links.next();
			if (false == linkObject instanceof Sensor) {
				continue;
			}
			Sensor link = (Sensor) linkObject;
			if (Sensor2EditPart.VISUAL_ID != IotGmfVisualIDRegistry
					.getLinkWithClassVisualID(link)) {
				continue;
			}
			List targets = link.getSensor();
			Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			if (false == theTarget instanceof Sensor) {
				continue;
			}
			Sensor dst = (Sensor) theTarget;
			List sources = link.getSensor();
			Object theSource = sources.size() == 1 ? sources.get(0) : null;
			if (false == theSource instanceof Sensor) {
				continue;
			}
			Sensor src = (Sensor) theSource;
			if (src != source) {
				continue;
			}
			result.add(new IotGmfLinkDescriptor(src, dst, link,
					IotGmfElementTypes.Sensor_4001, Sensor2EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static final DiagramUpdater TYPED_INSTANCE = new DiagramUpdater() {
		/**
		 * @generated
		 */
		@Override
		public List<IotGmfNodeDescriptor> getSemanticChildren(View view) {
			return IotGmfDiagramUpdater.getSemanticChildren(view);
		}

		/**
		 * @generated
		 */
		public List<IotGmfLinkDescriptor> getContainedLinks(View view) {
			return IotGmfDiagramUpdater.getContainedLinks(view);
		}

		/**
		 * @generated
		 */
		public List<IotGmfLinkDescriptor> getIncomingLinks(View view) {
			return IotGmfDiagramUpdater.getIncomingLinks(view);
		}

		/**
		 * @generated
		 */
		@Override
		public List<IotGmfLinkDescriptor> getOutgoingLinks(View view) {
			return IotGmfDiagramUpdater.getOutgoingLinks(view);
		}
	};

}
