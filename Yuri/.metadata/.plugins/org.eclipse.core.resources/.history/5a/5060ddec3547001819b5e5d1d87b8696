package genericjpadaopoa.diagram.part;

import genericjpadaopoa.AspectDAO;
import genericjpadaopoa.Controle;
import genericjpadaopoa.Init;
import genericjpadaopoa.Persistence;
import genericjpadaopoa.diagram.edit.parts.AspectDAOEditPart;
import genericjpadaopoa.diagram.edit.parts.ControleEditPart;
import genericjpadaopoa.diagram.edit.parts.InitEditPart;
import genericjpadaopoa.diagram.edit.parts.PersistenceEditPart;

import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.tooling.runtime.update.DiagramUpdater;

/**
 * @generated
 */
public class GenericJpaDaoPoaDiagramUpdater {

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaNodeDescriptor> getSemanticChildren(
			View view) {
		switch (GenericJpaDaoPoaVisualIDRegistry.getVisualID(view)) {
		case InitEditPart.VISUAL_ID:
			return getInit_1000SemanticChildren(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaNodeDescriptor> getInit_1000SemanticChildren(
			View view) {
		if (!view.isSetElement()) {
			return Collections.emptyList();
		}
		Init modelElement = (Init) view.getElement();
		LinkedList<GenericJpaDaoPoaNodeDescriptor> result = new LinkedList<GenericJpaDaoPoaNodeDescriptor>();
		{
			AspectDAO childElement = modelElement.getAspect();
			int visualID = GenericJpaDaoPoaVisualIDRegistry.getNodeVisualID(
					view, childElement);
			if (visualID == AspectDAOEditPart.VISUAL_ID) {
				result.add(new GenericJpaDaoPoaNodeDescriptor(childElement,
						visualID));
			}
		}
		for (Iterator<?> it = modelElement.getControle().iterator(); it
				.hasNext();) {
			Controle childElement = (Controle) it.next();
			int visualID = GenericJpaDaoPoaVisualIDRegistry.getNodeVisualID(
					view, childElement);
			if (visualID == ControleEditPart.VISUAL_ID) {
				result.add(new GenericJpaDaoPoaNodeDescriptor(childElement,
						visualID));
				continue;
			}
		}
		{
			Persistence childElement = modelElement.getPersistence();
			int visualID = GenericJpaDaoPoaVisualIDRegistry.getNodeVisualID(
					view, childElement);
			if (visualID == PersistenceEditPart.VISUAL_ID) {
				result.add(new GenericJpaDaoPoaNodeDescriptor(childElement,
						visualID));
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getContainedLinks(
			View view) {
		switch (GenericJpaDaoPoaVisualIDRegistry.getVisualID(view)) {
		case InitEditPart.VISUAL_ID:
			return getInit_1000ContainedLinks(view);
		case AspectDAOEditPart.VISUAL_ID:
			return getAspectDAO_2001ContainedLinks(view);
		case ControleEditPart.VISUAL_ID:
			return getControle_2002ContainedLinks(view);
		case PersistenceEditPart.VISUAL_ID:
			return getPersistence_2003ContainedLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getIncomingLinks(
			View view) {
		switch (GenericJpaDaoPoaVisualIDRegistry.getVisualID(view)) {
		case AspectDAOEditPart.VISUAL_ID:
			return getAspectDAO_2001IncomingLinks(view);
		case ControleEditPart.VISUAL_ID:
			return getControle_2002IncomingLinks(view);
		case PersistenceEditPart.VISUAL_ID:
			return getPersistence_2003IncomingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getOutgoingLinks(
			View view) {
		switch (GenericJpaDaoPoaVisualIDRegistry.getVisualID(view)) {
		case AspectDAOEditPart.VISUAL_ID:
			return getAspectDAO_2001OutgoingLinks(view);
		case ControleEditPart.VISUAL_ID:
			return getControle_2002OutgoingLinks(view);
		case PersistenceEditPart.VISUAL_ID:
			return getPersistence_2003OutgoingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getInit_1000ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getAspectDAO_2001ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getControle_2002ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getPersistence_2003ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getAspectDAO_2001IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getControle_2002IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getPersistence_2003IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getAspectDAO_2001OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getControle_2002OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<GenericJpaDaoPoaLinkDescriptor> getPersistence_2003OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static final DiagramUpdater TYPED_INSTANCE = new DiagramUpdater() {
		/**
		 * @generated
		 */
		@Override
		public List<GenericJpaDaoPoaNodeDescriptor> getSemanticChildren(
				View view) {
			return GenericJpaDaoPoaDiagramUpdater.getSemanticChildren(view);
		}

		/**
		 * @generated
		 */
		public List<GenericJpaDaoPoaLinkDescriptor> getContainedLinks(View view) {
			return GenericJpaDaoPoaDiagramUpdater.getContainedLinks(view);
		}

		/**
		 * @generated
		 */
		public List<GenericJpaDaoPoaLinkDescriptor> getIncomingLinks(View view) {
			return GenericJpaDaoPoaDiagramUpdater.getIncomingLinks(view);
		}

		/**
		 * @generated
		 */
		@Override
		public List<GenericJpaDaoPoaLinkDescriptor> getOutgoingLinks(View view) {
			return GenericJpaDaoPoaDiagramUpdater.getOutgoingLinks(view);
		}
	};

}
