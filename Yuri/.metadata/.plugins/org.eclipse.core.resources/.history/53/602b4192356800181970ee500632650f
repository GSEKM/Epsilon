package iotgmf.diagram.part;

import iotgmf.Arduino;
import iotgmf.Board;
import iotgmf.diagram.edit.parts.ArduinoEditPart;
import iotgmf.diagram.edit.parts.BoardEditPart;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.tooling.runtime.update.DiagramUpdater;

/**
 * @generated
 */
public class IotGmfDiagramUpdater {

	/**
	 * @generated
	 */
	public static List<IotGmfNodeDescriptor> getSemanticChildren(View view) {
		switch (IotGmfVisualIDRegistry.getVisualID(view)) {
		case BoardEditPart.VISUAL_ID:
			return getBoard_1000SemanticChildren(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfNodeDescriptor> getBoard_1000SemanticChildren(
			View view) {
		if (!view.isSetElement()) {
			return Collections.emptyList();
		}
		Board modelElement = (Board) view.getElement();
		LinkedList<IotGmfNodeDescriptor> result = new LinkedList<IotGmfNodeDescriptor>();
		{
			Arduino childElement = modelElement.getBoard();
			int visualID = IotGmfVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ArduinoEditPart.VISUAL_ID) {
				result.add(new IotGmfNodeDescriptor(childElement, visualID));
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getContainedLinks(View view) {
		switch (IotGmfVisualIDRegistry.getVisualID(view)) {
		case BoardEditPart.VISUAL_ID:
			return getBoard_1000ContainedLinks(view);
		case ArduinoEditPart.VISUAL_ID:
			return getArduino_2001ContainedLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getIncomingLinks(View view) {
		switch (IotGmfVisualIDRegistry.getVisualID(view)) {
		case ArduinoEditPart.VISUAL_ID:
			return getArduino_2001IncomingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getOutgoingLinks(View view) {
		switch (IotGmfVisualIDRegistry.getVisualID(view)) {
		case ArduinoEditPart.VISUAL_ID:
			return getArduino_2001OutgoingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getBoard_1000ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getArduino_2001ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getArduino_2001IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<IotGmfLinkDescriptor> getArduino_2001OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static final DiagramUpdater TYPED_INSTANCE = new DiagramUpdater() {
		/**
		 * @generated
		 */
		@Override
		public List<IotGmfNodeDescriptor> getSemanticChildren(View view) {
			return IotGmfDiagramUpdater.getSemanticChildren(view);
		}

		/**
		 * @generated
		 */
		@Override
		public List<IotGmfLinkDescriptor> getContainedLinks(View view) {
			return IotGmfDiagramUpdater.getContainedLinks(view);
		}

		/**
		 * @generated
		 */
		@Override
		public List<IotGmfLinkDescriptor> getIncomingLinks(View view) {
			return IotGmfDiagramUpdater.getIncomingLinks(view);
		}

		/**
		 * @generated
		 */
		@Override
		public List<IotGmfLinkDescriptor> getOutgoingLinks(View view) {
			return IotGmfDiagramUpdater.getOutgoingLinks(view);
		}
	};

}
