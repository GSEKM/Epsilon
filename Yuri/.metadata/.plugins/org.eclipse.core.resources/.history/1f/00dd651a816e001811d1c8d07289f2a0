	/*
 * 
 */
package iot.diagram.part;

	/**
 * @generated
 */
public class IotDiagramUpdater {
		
	/**
 * @generated
 */
public static boolean isShortcutOrphaned(org.eclipse.gmf.runtime.notation.View view) {
	return !view.isSetElement() || view.getElement() == null || view.getElement().eIsProxy();
}
	
		/**
 * @generated
 */
public static java.util.List<iot.diagram.part.IotNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (iot.diagram.part.IotVisualIDRegistry.getVisualID(view)) {
		case iot.diagram.edit.parts.BoardEditPart.VISUAL_ID:
	return getBoard_1000SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<iot.diagram.part.IotNodeDescriptor> getBoard_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
iot.Board modelElement = (iot.Board) view.getElement();
	java.util.LinkedList<iot.diagram.part.IotNodeDescriptor> result = new java.util.LinkedList<iot.diagram.part.IotNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getModelo().iterator(); it.hasNext();) {
		iot.Arduino childElement = (iot.Arduino) it.next();
					int visualID = iot.diagram.part.IotVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == iot.diagram.edit.parts.ArduinoEditPart.VISUAL_ID) {
	result.add(new iot.diagram.part.IotNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<iot.diagram.part.IotLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (iot.diagram.part.IotVisualIDRegistry.getVisualID(view)) {
		case iot.diagram.edit.parts.BoardEditPart.VISUAL_ID:
	return getBoard_1000ContainedLinks(view);
case iot.diagram.edit.parts.ArduinoEditPart.VISUAL_ID:
	return getArduino_2002ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<iot.diagram.part.IotLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (iot.diagram.part.IotVisualIDRegistry.getVisualID(view)) {
		case iot.diagram.edit.parts.ArduinoEditPart.VISUAL_ID:
	return getArduino_2002IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<iot.diagram.part.IotLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (iot.diagram.part.IotVisualIDRegistry.getVisualID(view)) {
		case iot.diagram.edit.parts.ArduinoEditPart.VISUAL_ID:
	return getArduino_2002OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<iot.diagram.part.IotLinkDescriptor> getBoard_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<iot.diagram.part.IotLinkDescriptor> getArduino_2002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	iot.Arduino modelElement = (iot.Arduino) view.getElement();
		java.util.LinkedList<iot.diagram.part.IotLinkDescriptor> result = new java.util.LinkedList<iot.diagram.part.IotLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Arduino_Conector_4004(modelElement));	
	return result;
}
		
/**
 * @generated
 */
public static java.util.List<iot.diagram.part.IotLinkDescriptor> getArduino_2002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<iot.diagram.part.IotLinkDescriptor> getArduino_2002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	iot.Arduino modelElement = (iot.Arduino) view.getElement();
		java.util.LinkedList<iot.diagram.part.IotLinkDescriptor> result = new java.util.LinkedList<iot.diagram.part.IotLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Arduino_Conector_4004(modelElement));	
	return result;
}
				
	/**
 * @generated
 */
private static java.util.Collection<iot.diagram.part.IotLinkDescriptor> getOutgoingFeatureModelFacetLinks_Arduino_Conector_4004(iot.Arduino source) {
	java.util.LinkedList<iot.diagram.part.IotLinkDescriptor> result = new java.util.LinkedList<iot.diagram.part.IotLinkDescriptor>();
		for (java.util.Iterator<?> destinations = source.getConector().iterator(); destinations.hasNext();) {
		iot.Motor destination = (iot.Motor) destinations.next();
		result.add(new iot.diagram.part.IotLinkDescriptor(source, destination, iot.diagram.providers.IotElementTypes.ArduinoConector_4004, iot.diagram.edit.parts.ArduinoConectorEditPart.VISUAL_ID));
		}
		return result;
}
	
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<iot.diagram.part.IotNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return IotDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<iot.diagram.part.IotLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return IotDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<iot.diagram.part.IotLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return IotDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<iot.diagram.part.IotLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return IotDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
